// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Landing   Landing[]
}

model Landing {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  initialp_prompt String
  userId          String @db.ObjectId

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Sections Sections[]
  Hero     Hero[]
  About    About[]
  Features Features[]
  Faq      Faq[]
  Cta      Cta[]
  Footer   Footer[]
  Header   Header[]
}

model Sections {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  headerId   String? @db.ObjectId
  heroId     String? @db.ObjectId
  aboutId    String? @db.ObjectId
  featuresId String? @db.ObjectId
  faqId      String? @db.ObjectId
  ctaId      String? @db.ObjectId
  footerId   String? @db.ObjectId
  landingId  String  @db.ObjectId

  header   Header?   @relation(fields: [headerId], references: [id])
  hero     Hero?     @relation(fields: [heroId], references: [id])
  hbout    About?    @relation(fields: [aboutId], references: [id])
  heatures Features? @relation(fields: [featuresId], references: [id])
  haq      Faq?      @relation(fields: [faqId], references: [id])
  cta      Cta?      @relation(fields: [ctaId], references: [id])
  footer   Footer?   @relation(fields: [footerId], references: [id])
  landing  Landing   @relation(fields: [landingId], references: [id], onDelete: Cascade)
}

model Header {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  landingId String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model Hero {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  img         Json
  button      Json
  layout      Json
  landingId   String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model About {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  img         Json
  layout      Json
  landingId   String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model Features {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  features  Json[]
  layout    Json
  landingId String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model Faq {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  faq       Json[]
  layout    Json
  landingId String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model Cta {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  layout      Json
  landingId   String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model Footer {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  landingId String @db.ObjectId

  landing  Landing    @relation(fields: [landingId], references: [id], onDelete: Cascade)
  Sections Sections[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
